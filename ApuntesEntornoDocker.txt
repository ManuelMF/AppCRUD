Comandos basicos
--------------------------------------------
docker run "nombre"  Correr un contenedor
docker pull "nombre" Descarga la imagen peró no la corre 
docker images        Muestra las imagenes que tienes 
docker ps            Muestra los contenedoes que estan corriendo
docker ps -a         Muestra todos los contenedores que corrieron hace poco
docker start         Ejecutar un contenedor parado Recuperando los tatos de un contenedor
docker logs          Muestra que este funcionando todo correctamente y sino lo arregla
docker exec 246545sSf4 Ejecuta un comando en un contenedor que esta corriendo
docker exec -it 246545sSf4 "ip contenedor"      -i crea una sesion interactiva -t emula una terminal
docker stop  246545sSf4 Detiene un contenedor
docker run -d  246545sSf4 Corre en backgroun
--------------------------------------------

Escribiendo un Dockerfile
--------------------------------------------
vim Dockerfile       Creamos un contenedor
saldrá

FROM  (Ponemos el nombre)    Es lo primero que sale y muestra una imagen, crea una imagen en base a esa para ahorar trabajo
                             hay que tratar de buscar una imagen similar en docker hub y buscar 

WORKDIR "/app"        donde hacemos el trabajo (creara el dirrectorio app y lo mete ahi)
COPY . .              Copia los archivos que tenga en el dirctorio actual a el de /app
RUN  (tiene yarn install -- production)  Compila todo

CMD ["node", "/app/src/index.js"]  especifica el comando que quiero que vaya a correr 
                                   corre "node"
                                   y le pasa por argumento index.js 
-------------------------------------------

Contruir un contenedor a partir de un dockerfile
-------------------------------------------
docker build .                         Construye un contenedor    tendrá una id aleatoria
docker build -t "nombre que quiera"    Construye un contenedor    tendrá una id con el nombre que quira
no la corrimos solo la contruimos
haremos un docker run "nombre"
-------------------------------------------

Usando puertos de docker
-------------------------------------------
al hacer el docker run "nombre" nos dirá el puerto por el cual escucha para poder unsarlo tendremos que hacer
docker run -p 3000:3000  puerto 3000 a la red 3000 para acceder desde el ordenador - si le pones el -d lo ejecuta en background
-------------------------------------------

Volumenes de docker
-------------------------------------------
docker run -v  /User/...app/etc:/etc/todos -p 3000:3000 "nombre de la imgen"          Para que los datos que se metan se guarden donde ponga
                  I
Ruta de orien<____J

lo bueno de docker es que puedo modificar el codigo de la app sin tener que estar recontruyendo la imagen
vim scr/static/js/app   (Cambiamos algo)  corremos la lina de docker run pero con cambios
docker run -v  /User/...app/etc:/etc/todos -p 3000:3000 "nombre de la imgen" -v /User/Kbs../app/src:app/src "nombre de la imagen"  (Puso esto para hacer el cambio pero luego lo hace sin) creo que con el vim basta
lo que hace esto es sobreescribirlo
-------------------------------------------

docker build y docker push
-------------------------------------------
una vez hacemos cambios hay que meterlos a la imagen "hay que reconstruirla" para eso hacemos:
docker build -t "nombre imagen":"le ponemos algo en plan v2"         Ya que esta cambiada

para que la vea otra persona la subo a un registro
1 es gratis ojo con lo que se sube
docker login           Para loguearte y poder subir la imagen (importante tagear la imagen)lo hago ahora
docker tag "a23e@ id de la imagen" usuario/nombre:version     Creara uno igual pero con mi nombre de user
docker push manu16/miapp:v3                                   Sube la imagen
-------------------------------------------
lo mas comun es tener 2 contenedores la app y la base de datos y que esten interconectadas para que no puedan entar en conflicto

Correr varios contenedores a la vez
-------------------------------------------
docker network create (todo-app @nombre@)            Creamos una network para que corran a la misma vez y se puedan conectar entre ellos
docker run -d \
>   --network todo-app --network-alias mysql \       Permite encontrar mas facil la ip del contenedor
>   -v todo-mysql-data:/var/lib/mysql  \             var/lib es donde estan los datos (guarda los datos de la maquina)
>   -e MYSQL_ROOT_PASSWORD=secret \                  Pasa las variables de entorno y las usa para autoconfigurarse 
>   -e MYSQL_DATABASE=todos                          ROOT_PASSWORD pone de password secret y DATABASE crea una base de datos llamada todos
>   mysql:5.7                                        Lo crea el contenerdor mysql+versoin

docker exec -it  "464f345 ip" mysql -p               Corre mysql dentro del contenedor (para poder usar sql)


correr la app conectada a sql
docker run -dp 3000:3000 
> --network todo-app\ 
> -e MYSQL_HOST=mysql\ 
> -e MYSQL_USER=root\
> -e MYSQL_PASSWORS=secret \
> -e MYSQL_DB=todos \
> nombre de contenedor+version si tiene 
-------------------------------------------

Docker-compose             Forma facil de escribir todo los comandos dificiles
-------------------------------------------
vim docker-compose.yaml

version: "3.7"               version de la sintaxis

Services                     nos permite correr muchos contenedores usando un solo archivo y automaticamente lo mete en la red (no tendremos que hacer todo lo de antes)
-------- "networt lo hace solo" 
nos abre los servicios y dentro tiene
app:
 image: manue/miapp:v2 
 ports: 3000:3000
 enviroment:
  MYSQL_HOST=mysql
  MYSQL_USER=root
  MYSQL_PASSWORS=secret 
  MYSQL_DB=todos 

mysql:
 image: mysql:5.7 
 volumes: ./todo-mysql-data:/var/lib/mysql       la ruta donde guarda las cosas
 enviroment:
  MYSQL_HOST=mysql
  MYSQL_USER=root

docker-compose up -d    Para correr lo que tengo dentro del compose -d corre en background
docker-compose up -d    Tambien sirve para levantar la app otra vez si se cayo
docker-compose down     Frena todo
-------------------------------------------
